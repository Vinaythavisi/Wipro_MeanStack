create a prototype for ProductDetails.
You require to store productid, productname, price, qty
Display all information in tabular foramt in html page
You require to display all information about product as well as total cost= price*qty

Function
Global and local scope of varaible
function myFunction() {
  let a = 4;
  return a * a;
}



let a = 4;
function myFunction() {
  return a * a;
}

<html>

<body>
	<script>
		// calling x after definition
		var x = 5;
		document.write(x, "\n");

		// calling y after definition
		let y = 10;
		document.write(y, "\n");

		// calling var z before definition will return undefined
		document.write(z, "\n");
		var z = 2;

		// calling let a before definition will give error
		document.write(a);
		let a = 3;
	</script>
</body>

</html>	

<html>
<body>
<script>						
function name(){
var name="Anuj";

{

let firstname="Bonny";


}

document.write(name);
document.write(firstname);//error

}
name();
</script>
</body>
</html>

*******************************
<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Function Closures</h2>
<p>Counting with a local variable.</p>

<p id="demo"></p>

<script>
// Initiate counter
let counter = 0;

// Function to increment counter
function add() {
  let counter = 0; 
  counter += 1;
}

// Call add() 3 times
add();
add();
add();

// The result is not 3 because you mix up the globaland local counter
document.getElementById("demo").innerHTML = "The counter is: " + counter;
</script>

</body>
</html>


*****************
<!DOCTYPE html>
<html>
<body>

<p id="demo">0</p>

<script>
document.getElementById("demo").innerHTML = add();
function add() {
  let counter = 0;
  function plus() {
	counter += 1;
	}
  plus();  
  return counter; 
}
</script>

</body>
</html>

***************************************************************************************
<!DOCTYPE html>
<html>
<body>

<h1>A closure is a function having access to the parent scope,
     even after the parent function has closed.</h1>
<button type="button" onclick="myFunction()">Count!</button>

<p id="demo">0</p>

<script>
const add = (function () {
  let counter = 0;
  return function () {counter += 1; return counter;}
})();

function myFunction(){
  document.getElementById("demo").innerHTML = add();
}
</script>

</body>
</html>
****************************************************************************
IIFE- Immediate Invoke function
as they declare they will run
(function () {
    //write your js code here
})();



!DOCTYPE html>
<html>
<body>


<script>
(function () {
    var userName = "Steve";
    
    function display(name)
    {
        alert("MyScript2.js: " + name);
    }

    display(userName);
  })();
</script>

</body>
</html>
*****************************************************************************
			call()
<!DOCTYPE html>
<html>
<body>

<p id="demo"></p>

<script>
const person = {
  fullName: function() {
    return this.firstName + " " + this.lastName;
  }
}
const person1 = {
  firstName:"Mohit",
  lastName: "Sharma"
}
const person2 = {
  firstName:"Kanika",
  lastName: "Goyal"
}

</script>

</body>
</html>

******************************
call(), apply(), bind()-- access properties of any other objects
***********************************************************************
			MAP

A Map holds key-value pairs where the keys can be any datatype.

A Map remembers the original insertion order of the keys.

A Map has a property that represents the size of the map.

Method	Description
new Map()	Creates a new Map object
set()	Sets the value for a key in a Map
get()	Gets the value for a key in a Map
clear()	Removes all the elements from a Map
delete()	Removes a Map element specified by a key
has()	Returns true if a key exists in a Map
forEach()	Invokes a callback for each key/value pair in a Map
entries()	Returns an iterator object with the [key, value] pairs in a Map
keys()	Returns an iterator object with the keys in a Map
values()	Returns an iterator object of the values in a Map


Property	Description
size	Returns the number of Map elements

*****************************************************************************************
					Callback function
A callback is a function passed as an argument to another function.
function myDisplayer(some) {
  document.getElementById("demo").innerHTML = some;
}
function multiplication(num){
document.getElementById("demo").innerHTML = num*num;
}

function myCalculator(num1, num2, myCallback) {
  let sum = num1 + num2;
  myCallback(sum);
}

myCalculator(5, 5, myDisplayer);
myCalculator(2,3,multiplication);


************************************************************************************
			Promises Object
A Promise is a JavaScript object that links producing code and consuming code
"Producing code" is code that can take some time

"Consuming code" is code that must wait for the result

let myPromise = new Promise(function(myResolve, myReject) {
// "Producing Code" (May take some time)

  myResolve(); // when successful
  myReject();  // when error
});

// "Consuming Code" (Must wait for a fulfilled Promise)
myPromise.then(
  function(value) { /* code if successful */ },
  function(error) { /* code if some error */ }
);



The Promise object supports two properties: state and result.
state     Result
Pending  undefined
Fulfilled a result value
Rejected an error object

lamda/aarow function

(a,b)=>{


}

	


